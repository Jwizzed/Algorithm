# Depth-fisrt search
Complete the program that reads a directed graph in the following format:

the first line contains n, the number of vertices (vertices are numbered 0 to n-1), and m, the number of edges, separated by a space.
each of the next m lines contains two integers a and b, denoting a directed edge from vertex a to vertex b.
Then performs a depth-first search starting at vertex 0 and calculates the pre-visit and post-visit times. These numbers should start at 0 and not exceed 2n-1. Vertices unreachable from 0 should use -1 for both pre-visit and post-visit times. There can be multiple correct orders for depth-first search, and any correct order is acceptable.
input:
7 10
0 3
0 5
1 3
2 0
3 4
4 0
4 1
5 2
5 3
6 0

output:
0 11
3 4
8 9
1 6
2 5
7 10
-1 -1


# Two Coloring
Complete the program that reads an undirected graph in the following format:

the first line contains n, the number of vertices (vertices are numbered 0 to n-1), and m, the number of edges, separated by a space.
each of the next m lines contains two integers a and b, denoting an undirected edge between vertices a and b.
Then finds a valid two-coloring in the graph. A valid two-coloring is an assignment of two colors to the vertices such that for all edges uv, the colors assigned to u and v are different. Print "true" if there is a valid two-coloring, then list the colors (0 and 1) for each vertex in order. Print "false" if no valid two-coloring exists. There can be multiple correct colorings, and any valid coloring is acceptable.
input:
6 7
0 3
3 1
0 2
4 0
4 1
2 5
3 5

output:
true
0
0
1
1
1
0

input:
6 3
0 3
0 4
1 5

output:
true
1
1
0
0
0
0

input:
5 5
0 1
3 2
4 2
1 3
0 4

output:
false


# Cycle Detection
Complete the program that reads a directed graph in the following format:

the first line contains n, the number of vertices (vertices are numbered 0 to n-1), and m, the number of edges, separated by a space.
each of the next m lines contains two integers a and b, denoting a directed edge from vertex a to vertex b.
Then checks whether the graph contains a cycle. Print true if it contains a cycle, or false if it does not.
input:
6 9
0 3
0 5
1 3
2 0
3 4
4 0
4 1
5 2
5 3

output:
true

input:
6 9
0 3
0 5
3 1
0 2
4 3
4 0
4 1
2 5
3 5

output:
false

input:
5 4
0 1
2 3
3 4
4 2

output:
true

# Topological Sort
Complete the program that reads a directed acyclic graph in the following format:

the first line contains n, the number of vertices (vertices are numbered 0 to n-1), and m, the number of edges, separated by a space.
each of the next m lines contains two integers a and b, denoting a directed edge from vertex a to vertex b.
Then prints the vertices in a topological order. It is guaranteed that the input graph is acyclic. There can be multiple correct orders, and any correct order is acceptable.
input:
6 9
0 3
0 5
3 1
0 2
4 3
4 0
4 1
2 5
3 5

output:
4
0
2
3
5
1

input:
5 4
0 1
3 2
3 4
4 2

output:
0
3
4
1
2
