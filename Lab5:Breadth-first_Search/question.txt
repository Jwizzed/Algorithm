# Breadth-first Search
Complete the program that reads a directed graph in the following format:

the first line contains n, the number of vertices (vertices are numbered 0 to n-1), and m, the number of edges, separated by a space.
each of the next m lines contains two integers a and b, denoting a directed edge from vertex a to vertex b.
Then calculate the shortest distance from vertex 0 to every vertex and print them in order. For example:
input:
6 9
0 3
0 5
1 3
2 0
3 4
4 0
4 1
5 2
5 3

output:
0
3
2
1
2
1

# Shortest Path (unweighted)
Complete the program that reads a directed graph in the following format:

the first line contains n, the number of vertices (vertices are numbered 0 to n-1), and m, the number of edges, separated by a space.
each of the next m lines contains two integers a and b, denoting a directed edge from vertex a to vertex b.
Then calculate the shortest path from vertex 0 to vertex 1. Print the output in the following format:

the first line contains the shortest distance.
the second line lists the vertices in the shortest path from vertex 0 to vertex 1 in order, including both ends, separated by spaces.
For example:
input:
6 9
0 3
0 5
1 3
2 0
3 4
4 0
4 1
5 2
5 3

output:
3
0 3 4 1